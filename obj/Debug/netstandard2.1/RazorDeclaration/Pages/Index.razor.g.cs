#pragma checksum "C:\Users\Annika\Desktop\Praktik\SCDFrontend\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5e937fc8d7f4289f061d2446042a0e17592e450a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SCDFrontend.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using SCDFrontend;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\_Imports.razor"
using SCDFrontend.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\Pages\Index.razor"
using SCDFrontend.DataAccess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\Pages\Index.razor"
using SCDFrontend.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\Pages\Index.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\Pages\Index.razor"
using System.Web;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 48 "C:\Users\Annika\Desktop\Praktik\SCDFrontend\Pages\Index.razor"
       
    private List<Installation> Installations = null;

    // Load data from database
    public async Task LoadInstallations()
    {
        Installations = null;
        Installations = await CosmosConnector.GetInstallationsAsync();
    }

    protected override async Task OnInitializedAsync() // run as page loads yis *<|:-)
    {
        await LoadInstallations();
    }

    // Search
    string SearchTerm { get; set; } = "";

    List<Installation> Filtered => Installations.Where(i =>
    {
        string S = SearchTerm.ToLower();

    // Search for name and id
    return i.name.ToLower().Contains(S) || i.ToString().ToLower().Contains(S);
    }).ToList();


    // Order
    // Works but not very pretty
    bool isSortedAscending = true;
    string activeSortColumn = "";

    private void SortData(string columnName)
    {
        List<Installation> SortedInst = new List<Installation>();
        switch (columnName)
        {
            case "ID":
                if (isSortedAscending)
                {
                    Installations = Filtered.OrderByDescending(i => i.id).ToList();
                    isSortedAscending = false;
                }
                else
                {
                    Installations = Filtered.OrderBy(i => i.id).ToList();
                    isSortedAscending = true;
                }
                break;

            case "NAME":
                if (isSortedAscending)
                {
                    Installations = Filtered.OrderByDescending(i => i.id).ToList();
                    isSortedAscending = false;
                }
                else
                {
                    Installations = Filtered.OrderBy(i => i.id).ToList();
                    isSortedAscending = true;
                }
                break;
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
