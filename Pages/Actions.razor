
@using System.Net.Http
@using Newtonsoft.Json.Linq
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using SCDFrontend.Models;
@using SCDFrontend.DataAccess;
@using System.ComponentModel;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime


<button type="button" class="btn btn-dark" >Launch</button>
<br>
<br>
<button type="button" class="btn btn-dark">Start</button>
<br>
<br>
<button type="button" class="btn btn-dark">Stop</button>
<br>
<br>
<button type="button" id="copy" class="btn btn-dark" data-toggle="modal" data-target="#myModal" @onclick="CreateCopy">Copy</button>
<br>
<br>
<button type="button" class="btn btn-dark">Delete</button>
<br>
<br>
<button type="button" class="btn btn-dark" @onclick="DownloadText">Monitor Server</button>



<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
    
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Create copy of @Name</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

            </div>

            <EditForm Model="@_CopyInst" OnValidSubmit="Something">
                <DataAnnotationsValidator/>
                <div class="modal-body">
                
                    <div class="modal-split">
                        <h5>Name and copy method:</h5>
                        <label for="inst-name">Installation name:</label>
                        <InputText id="inst-name" @bind-Value="_CopyInst.newName" placeholder="Inst-01"/><br>

                        <InputRadioGroup Name="method" @bind-Value="_CopyInst.copyMethod">
                            @foreach (var cm in (CopyMethod[]) Enum.GetValues(typeof(CopyMethod)))
                            {
                                <InputRadio Value="Enum.GetName(typeof(CopyMethod), cm)" />
                                @Enum.GetName(typeof(CopyMethod), cm)
                                <br>
                            }
                        </InputRadioGroup>
	    	        </div>


	    	        <div class="modal-split">
                        <h5>Choose client:</h5>
                        <select class="custom-select" id="inst-client" @bind="_CopyInst.clientId">
                            @if(Clients == null)
                            {
                                <option>Loading clients</option>
                            } 
                            else 
                            {
                                @foreach (var c in Clients)
                                {
                                    <option value="@c.id">@c.name</option>
                                }
                            }
                        </select>
	    	        </div>
                    @*Hej*@

                    <div class="modal-split">
                        <h5>Choose subscription:</h5>
                        <select class="custom-select" id="inst-client" @bind="_CopyInst.subId">
                            @if(Subs == null)
                            {
                                <option>Loading subscriptions</option>
                            } 
                            else 
                            {
                                @foreach (var s in Subs)
                                {
                                    <option value="@s.id">@s.name</option>
                                }
                            }
                        </select>
	    	        </div>


	    	        <div class="modal-split">
                        <h5>Review details</h5>
	    	            Name: @_CopyInst.oldName <br>                        
                        Copy method: @_CopyInst.copyMethod <br>
                        Client: @_CopyInst.client<br>
                        <button type="submit" @onclick="CreateCopy1">Submit</button>
	    	        </div>	

                </div>
            </EditForm>

            <div class="modal-footer">
                <!-- Populated in JS ! -->
            </div>
        </div>
    </div>
</div>
        

@code {
    List<Client> Clients = null;
    List<Subscription> Subs = null;
    private CopyInst _CopyInst = new CopyInst();
    
    [Parameter]
    public string Name { get; set; }
    protected override async Task OnInitializedAsync() // run as page loads yis *<|:-)
    {
        await LoadClients();
        await LoadSub();
    }

    public async Task LoadClients()
    {
        Clients = null;
        Clients = await ApiConnector.GetClients();
    }

    public async Task LoadSub() 
    {
        Subs = null;
        Subs = await ApiConnector.GetSubscriptions();
    }
    
    async Task DownloadText()
    {
        // Generate a text file
        byte[] file = System.Text.Encoding.UTF8.GetBytes("full address:s:20.52.144.65:3389\nprompt for credentials:i:1\nadministrative session:i:1");
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "connect.rdp", "text/plain", file);
    }
    async Task DownloadBinary()
    {
        byte[] file = Enumerable.Range(0, 100).Cast<byte>().ToArray<byte>();
        string fileName = "file.bin";
        string contentType = "application/octet-stream";

        // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
        if (JSRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, contentType, file);
        }
        else
        {
            // Fall back to the slow method if not in WebAssembly
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, file);
        }
    }

    async Task CreateCopy() 
    {
        await JSRuntime.InvokeVoidAsync("prep_modal");
    }

    async Task CreateCopy1() 
    {
        _CopyInst.oldName = Name;
        Console.WriteLine("Client id" + _CopyInst.clientId);
        // InputSelect cannot handle objects
        foreach(var c in Clients)
        {
            if(_CopyInst.clientId == c.id)
            {
                _CopyInst.client = c;
                Console.WriteLine(c.id + " " + c.name);
            }
        }

        foreach(var s in Subs)
        {
            if(_CopyInst.subId == s.id)
            {
                _CopyInst.subscription = s;
                Console.WriteLine(s.id + " " + s.name);
            }
        }

        await ApiConnector.createCopy(_CopyInst);
    }

    void Something() 
    {

    }

    async Task<List<Client>> GetClients()
    {
        return await ApiConnector.GetClients();
    }
}

