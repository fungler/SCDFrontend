@using SCDFrontend.DataAccess;
@using SCDFrontend.Models;
@implements IDisposable;
@page "/{sub}"

<head>
</head>
<h1>@subNamePretty</h1>
<hr />

<div>
    @if (Installations is not null)
    {
        <InstallationList Installations=@Installations/>
    }
    else
    {
        <h1><em>Loading...</em></h1>
    }
</div>

<button type="button" class="btn btn-dark" @onclick="@LoadInstallations">Refresh</button>

@code
{
    [Parameter]
    public string sub { get; set; }
    private string subNamePretty { get; set; }
    private string subSub { get; set; }

    public List<Installation> Installations { get; set; }
    public List<Installation> AllInstallations { get; set; }

    // Load data from database
    public async Task<List<Installation>> LoadInstallations()
    {
        return await ApiConnector.GetInstallations();
    }

    protected override async Task OnInitializedAsync() // run as page loads yis *<|:-)
    {
        Console.WriteLine("OnInitialixedAsync");
        AllInstallations = await LoadInstallations();
        foreach(var i in AllInstallations)
        {
            if(i.subscription.name.Equals(subNamePretty))
            {
                Installations.Add(i);
            }
        }
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized");
        Installations = new List<Installation>();
        subNamePretty = sub.Replace("-", " ");
    }

    protected override bool ShouldRender()
    {
        subNamePretty = sub.Replace("-", " ");
        Installations = new List<Installation>();
        foreach(var i in AllInstallations)
        {
            if(i.subscription.name.Equals(subNamePretty))
            {
                Installations.Add(i);
            }
        }
        Console.WriteLine("ShouldRender");
        return true;
    }

    public void Dispose()
    {
     Console.WriteLine("I Have Been Disposed FUCK");
    }
}