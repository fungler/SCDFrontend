@using System.Net.Http
@using Newtonsoft.Json.Linq
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using SCDFrontend.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<button type="button" class="btn btn-dark" @onclick="DownloadText">Launch</button>
<br>
<br>
<button type="button" class="btn btn-dark">Start</button>
<br>
<br>
<button type="button" class="btn btn-dark">Stop</button>
<br>
<br>
<button type="button" id="copy" class="btn btn-dark" data-toggle="modal" data-target="#myModal" @onclick="CreateCopy">Copy</button>
<br>
<br>
<button type="button" class="btn btn-dark">Delete</button>
<br>
<br>

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
    
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Create copy of @Name</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

            </div>

            <EditForm Model="@_CopyInst" OnValidSubmit="Something">
                <DataAnnotationsValidator/>
                <div class="modal-body">
                
                    <div class="modal-split" id="split-1">
                        <h5>Name and copy method:</h5>
                        <label for="inst-name">Installation name:</label>
                        <InputText id="inst-name" @bind-Value="_CopyInst.Name" placeholder="Inst-01"/><br>

                        <InputRadioGroup Name="method" @bind-Value="_CopyInst.Method">
                            @foreach (var cm in (CopyMethod[]) Enum.GetValues(typeof(CopyMethod)))
                            {
                                <InputRadio Value="cm" />
                                @cm
                                <br>
                            }
                        </InputRadioGroup>
	    	        </div>


	    	        <div class="modal-split" id="split-2">
                        <h5>Clients:</h5>
                        <table>
                            <tbody>
                        @foreach (var item in clients)
                        {

                            <tr @onclick="@(() => AddToClients(item))">
                                <td>
                                    @item.Name
                                </td>
                            </tr>
                        }
                        </tbody>
                        </table>
                        @if (_CopyInst.Clients is not null) 
                        {
                            @foreach (var item in _CopyInst.Clients)
                            {
                                <p>@item.Name</p>
                            }
                        }
                        
	    	        </div>
                    @*Not shown in the frontend, Bitcheeessss*@
	    	        <div class="modal-split" id="split-3">
                        <h5>Review details</h5>
	    	            Name: @_CopyInst.Name <br>                        
                        Copy method: @_CopyInst.Method <br>
                        Clients: 
                        @foreach (var c in _CopyInst.Clients)
                        {
                            @c.Name <br>
                        }
	    	        </div>	

                </div>
            </EditForm>

            <div class="modal-footer">
                
                <!-- Populated in JS ! -->
            </div>
        </div>
    </div>
</div>
        

@code {

    List<Client1> clients = new List<Client1> {new Client1("Bank Nordik"), new Client1("Nordea"), new Client1("Danske Bank")};

    private void AddToClients(Client1 client) 
    {
        _CopyInst.Clients.Add(client);
        clients.Remove(client);
    }

    private CopyInst _CopyInst = new CopyInst();
    
    [Parameter]
    public string Name { get; set; }
    async Task DownloadText()
    {
        // Generate a text file
        byte[] file = System.Text.Encoding.UTF8.GetBytes("full address:s:20.52.46.188:3389\nprompt for credentials:i:1\nadministrative session:i:1");
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "connect.rdp", "text/plain", file);
    }
    async Task DownloadBinary()
    {
        byte[] file = Enumerable.Range(0, 100).Cast<byte>().ToArray<byte>();
        string fileName = "file.bin";
        string contentType = "application/octet-stream";

        // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
        if (JSRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, contentType, file);
        }
        else
        {
            // Fall back to the slow method if not in WebAssembly
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, file);
        }
    }

    async Task CreateCopy() 
    {
        await JSRuntime.InvokeVoidAsync("prep_modal");
    }

    [JSInvokable]
    public static async Task<CopyInst> Something() 
    {
        return null;
    }
}

