@page "/inst/{id}"

@using SCDFrontend.DataAccess;
@using SCDFrontend.Models;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime

<h1>Installation #@id</h1>
<hr/>



<div class="row">
    <div class="column" style="background-color:#aaa;">
        @if (Installation == null) {
            <p>Loading...</p>
        } else{
            <h2>Info</h2>
            <p>Id: @Installation.id</p>
            <p>Name: @Installation.name</p>
            <p>Status: @Installation.status</p>
            <p>Active users: @Installation.active_users</p>
        }
    </div>
    <div class="column" style="background-color:#bbb;">
        <button type="button" @onclick="DownloadText">Launch</button><br/>
        <button type="button">Start</button><br/>
        <button type="button">Stop</button><br/>
        <button type="button">Delete</button>
    </div>
</div>


@code {
    async Task DownloadText()
    {
        // Generate a text file
        byte[] file = System.Text.Encoding.UTF8.GetBytes("full address:s:20.52.46.188:3389\nprompt for credentials:i:1\nadministrative session:i:1");
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "connect.rdp", "text/plain", file);
    }
    async Task DownloadBinary()
    {
        byte[] file = Enumerable.Range(0, 100).Cast<byte>().ToArray<byte>();
        string fileName = "file.bin";
        string contentType = "application/octet-stream";

        // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
        if (JSRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, contentType, file);
        }
        else
        {
            // Fall back to the slow method if not in WebAssembly
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, file);
        }
    }

    [Parameter]
    public string id { get; set; }

    private Installation Installation = null;

    public async Task LoadInstallation(string instId)
    {
        Installation = null;
        Console.Write("Something");
        Installation = await ApiConnector.GetInstallation(instId);
    }

    protected override async Task OnInitializedAsync()
    {
        Console.Write("Test2");
        await LoadInstallation(id);
    }
}