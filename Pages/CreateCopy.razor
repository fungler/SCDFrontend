@using SCDFrontend.Models
@using SCDFrontend.DataAccess
@inject IModalService ModalService
@inject IJSRuntime jsRuntime

<div>
    <EditForm Model="@_CopyInst" OnValidSubmit="@OpenConfirmationModal">
        <DataAnnotationsValidator/>
        <ValidationSummary />
        <h5>Name and Method:</h5>
        <label for="inst-name">Installation name:</label>
                        <InputText id="inst-name" @bind-Value="_CopyInst.newName" placeholder="Inst-01"/><br>
                        <br>
                        <InputRadioGroup Name="method" @bind-Value="_CopyInst.copyMethod">
                            @foreach (var cm in (CopyMethod[]) Enum.GetValues(typeof(CopyMethod)))
                            {
                                <InputRadio Value="Enum.GetName(typeof(CopyMethod), cm)" />
                                @Enum.GetName(typeof(CopyMethod), cm)
                                <br>
                            }
                        </InputRadioGroup>
                        <br>
            <h5>Choose client:</h5>
                    <select class="custom-select" id="inst-client" @bind="_CopyInst.clientId">
                            @if(Clients == null)
                            {
                                <option>Loading clients</option>
                            } 
                            else 
                            {
                                <option value="" selected disabled hidden>Choose here</option>
                                @foreach (var c in Clients)
                                {
                                    <option value="@c.id">@c.name</option>
                                }
                            }
                        </select>
                        <br>
                        <h5>Choose subscription:</h5>
                        <select class="custom-select" id="inst-client" @bind="_CopyInst.subId">
                            @if(Subs == null)
                            {
                                <option>Loading subscriptions</option>
                            } 
                            else 
                            {
                                <option value="" selected disabled hidden>Choose here</option>
                                @foreach (var s in Subs)
                                {
                                    <option value="@s.id">@s.name</option>
                                }
                            }
                        </select>
                        <br>
                        <button type="submit" class="btn btn-primary">Next</button>
    </EditForm>
</div>

@code
{
    private ApiConnector apicon = new ApiConnector();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public string Name {get; set; }

    private string Error { get; set; }
    List<Client> Clients;
    List<Subscription> Subs;
    private CopyInst _CopyInst = new CopyInst();

    protected override void OnInitialized()
    {
        Clients = new List<Client>();
        Subs = new List<Subscription>();
    }

    protected override async Task OnInitializedAsync() // run as page loads yis *<|:-)
    {
        Clients = await apicon.GetClients();
        Subs = await apicon.GetSubscriptions();
    }

    async Task OpenConfirmationModal()
    {
        _CopyInst.oldName = Name;
        
        // InputSelect cannot handle objects
        foreach(var c in Clients)
        {
            if(_CopyInst.clientId == c.id)
            {
                _CopyInst.client = c;
                break;
            }
        }

            foreach(var s in Subs)
            {
                if(_CopyInst.subId == s.id)
                {
                    _CopyInst.subscription = s;
                    break;
                }
            }

            var parameters = new ModalParameters();
            parameters.Add("copy", _CopyInst);
            var confirmationModal = ModalService.Show<ConfirmCopy>("Confirm Copy", parameters);
            var result = await confirmationModal.Result;

            if (result.Cancelled)
            {
                return;
            }
            BlazoredModal.Close();

    }
}