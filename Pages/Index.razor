@page "/"
@page "/{sub}"

@using SCDFrontend.DataAccess;
@using SCDFrontend.Models;
@inject NavigationManager NavigationManager;


<head>
</head>

@if(string.IsNullOrEmpty(sub))
{
    <h1>All Installations</h1>
}
else
{
    <h1>@sub.Replace("-"," ") </h1>
}
<hr />

<div class="active-purple-3 active-purple-4 mb-4">
  <input class="form-control" type="text" placeholder="Search" aria-label="Search for installation" @bind-value="SearchTerm" @bind-value:event="oninput">
</div>

<br>

<div>
    <table class="table table-hover table-dark">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Subscription Name</th>
            <th scope="col">Copy Method</th>
            <th scope="col">Client</th>
        </tr>
    </thead>
    @if (ShownInstallations is not null)
    {
        <tbody>
        @foreach (Installation inst in Filtered)
        {
            <tr @onclick="@(() => Navigate(inst.name.ToString()))">
                <td>@inst.name</td>
                <td>@inst.subscription?.name</td>
                <td>@inst.copyMethod</td>
                <td>@inst.client.name</td>
            </tr>           
        }
        </tbody>
    }
    </table>
</div>

<button type="button" class="btn btn-dark" @onclick="@(() => LoadInstallations())">Refresh</button>


@code {
    [Parameter]
    public string sub { get; set; }

    protected string SearchTerm { get; set; } = "";

    public List<Installation> AllInstallations { get; set; }
    public List<Installation> ShownInstallations { get; set; }

    // Load data from database
    public async Task<List<Installation>> LoadInstallations()
    {
        return await ApiConnector.GetInstallations();
    }

    protected override async Task OnInitializedAsync() // run as page loads yis *<|:-)
    {
        AllInstallations = await LoadInstallations();

        if(string.IsNullOrEmpty(sub) || sub.Equals("All Installations"))
        {   
            sub = "All Installations";
            ShownInstallations = AllInstallations;
        }
        else
        {
            foreach(var inst in AllInstallations)
            {
                if(inst.subscription.name.Equals(sub.Replace("-"," "))) {
                    ShownInstallations.Add(inst);
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        ShownInstallations = new List<Installation>();
        AllInstallations = new List<Installation>();
        if(string.IsNullOrEmpty(sub) || sub.Equals("All Installations"))
        {   
            sub = "All Installations";
            ShownInstallations = AllInstallations;
        }
        else
        {
            foreach(var inst in AllInstallations)
            {
                if(inst.subscription.name.Equals(sub.Replace("-"," "))) {
                    ShownInstallations.Add(inst);
                }
            }
        }
    }

    protected override bool ShouldRender()
    {
        ShownInstallations = new List<Installation>();
        if(string.IsNullOrEmpty(sub) || sub.Equals("All Installations"))
        {   
            sub = "All Installations";
            ShownInstallations = AllInstallations;
        }
        else
        {
            foreach(var inst in AllInstallations)
            {
                if(inst.subscription.name.Equals(sub.Replace("-"," "))) {
                    ShownInstallations.Add(inst);
                }
            }
        }
        return true;
    }

    private void Navigate(string name)
    {

        NavigationManager.NavigateTo("/inst/" + name);
    }


    // Search
    bool isSortedAscending = true;
    string activeSortColumn = "";

    private void Search()
    {
        
    }

    List<Installation> Filtered => ShownInstallations.Where(i =>
    {
        string S = SearchTerm.ToLower();

        // Search for name and id
        return i.name.ToLower().Contains(S) || i.ToString().ToLower().Contains(S);
    }).ToList();

    private void SortData(string columnName)
    {
        List<Installation> SortedInst = new List<Installation>();
        switch (columnName)
        {
            case "ID":
                if (isSortedAscending)
                {
                    ShownInstallations = ShownInstallations.OrderByDescending(i => i.id).ToList();
                    isSortedAscending = false;
                }
                else
                {
                   ShownInstallations = ShownInstallations.OrderBy(i => i.id).ToList();
                    isSortedAscending = true;
                }
                break;

            case "NAME":
                if (isSortedAscending)
                {
                    ShownInstallations = ShownInstallations.OrderByDescending(i => i.id).ToList();
                    isSortedAscending = false;
                }
                else
                {
                    ShownInstallations = ShownInstallations.OrderBy(i => i.id).ToList();
                    isSortedAscending = true;
                }
                break;
        }
    }
    
}